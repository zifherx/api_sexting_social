{"version":3,"sources":["../../src/controllers/post.controller.js"],"names":["postCtrl","getAll","req","res","Post","find","sort","fechaCreacion","populate","query","length","json","status","message","console","log","getOneById","postId","params","findById","getAllByUser","usuario","body","User","email","$in","foundUser","user","_id","foundPosts","createPost","texto","newPost","map","a","save","deletePost","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Post from '../models/Post'\r\nimport User from '../models/User';\r\n\r\nconst postCtrl = {};\r\n\r\npostCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Post.find().sort({ fechaCreacion: -1 }).populate('user');\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Posts' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\npostCtrl.getOneById = async(req, res) => {\r\n    const { postId } = req.params;\r\n    try {\r\n        const query = await Post.findById(postId);\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Post' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\npostCtrl.getAllByUser = async(req, res) => {\r\n    const { usuario } = req.body;\r\n    try {\r\n        const foundUser = await User.find({ email: { $in: usuario } })\r\n            // console.log(foundUser)\r\n\r\n        if (foundUser.length == 0) return res.status(404).json({ message: 'Usuario no existe' })\r\n\r\n        const foundPosts = await Post.find({ user: { $in: foundUser._id } })\r\n\r\n        if (foundPosts.length > 0) {\r\n            res.json(foundPosts);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Post de este usuario aún' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\npostCtrl.createPost = async(req, res) => {\r\n    const { user, texto } = req.body;\r\n    try {\r\n        const newPost = new Post({\r\n            texto\r\n        })\r\n        const foundUser = await User.find({ email: { $in: user } })\r\n        newPost.user = foundUser.map(a => a._id);\r\n\r\n        const query = await newPost.save();\r\n        console.log(query)\r\n        if (query) {\r\n            res.json({ message: 'Post creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\npostCtrl.deletePost = async(req, res) => {\r\n    const { postId } = req.params;\r\n    try {\r\n        const query = await Post.findByIdAndDelete(postId);\r\n        if (query) {\r\n            res.json({ message: 'Post eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Post no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default postCtrl;"],"file":"post.controller.js"}