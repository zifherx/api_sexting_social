{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["authCtrl","iniciarSesion","req","res","body","email","password","User","findOne","userFound","status","json","message","matchPassword","token","jwt","sign","id","_id","config","SECRET","expiresIn","findByIdAndUpdate","online","codigo","cambiarContrasena","locals","jwtPayload","oldPassword","newPassword","findById","encryptPassword","save","newObj","console","log","registrarCuenta","name","username","roles","newUser","Role","find","$in","foundRole","map","a","rol","query","deleteAccount","nowPassword","findByIdAndDelete","dropAccount","cerrarSesion","offline"],"mappings":"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","sourcesContent":["import Role from '../models/Role'\r\nimport User from '../models/User'\r\nimport jwt from 'jsonwebtoken'\r\nimport config from '../config/config'\r\n\r\nconst authCtrl = {};\r\n\r\nauthCtrl.iniciarSesion = async(req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    const userFound = await User.findOne({ email });\r\n    // console.log(userFound)\r\n\r\n    if (!userFound) return res.status(404).json({ message: 'Usuario no existe' });\r\n\r\n    if (!userFound.status) return res.status(403).json({ message: 'Usuario Inactivo' })\r\n\r\n    const matchPassword = await User.matchPassword(password, userFound.password);\r\n\r\n    if (!matchPassword) return res.status(401).json({ token: null, message: 'Contraseña Errónea' })\r\n\r\n    const token = jwt.sign({ id: userFound._id }, config.SECRET, { expiresIn: '24h' });\r\n\r\n    //Cambio de estado de online\r\n    const online = await User.findByIdAndUpdate(userFound._id, { online: 1 })\r\n\r\n    res.json({ token, codigo: userFound._id });\r\n}\r\n\r\nauthCtrl.cambiarContrasena = async(req, res) => {\r\n    const { id } = res.locals.jwtPayload;\r\n    const { oldPassword, newPassword } = req.body;\r\n\r\n    if (!(oldPassword && newPassword)) return res.status(400).json({ message: 'Las contraseñas no coinciden' });\r\n\r\n    const userFound = await User.findById(id);\r\n\r\n    if (!userFound) return res.status(404).json({ message: 'Usuario no existe' });\r\n\r\n    const matchPassword = await User.matchPassword(oldPassword, userFound.password);\r\n    if (!matchPassword) return res.status(401).json({ token: null, message: 'Contraseña Errónea' })\r\n\r\n    userFound.password = await User.encryptPassword(newPassword);\r\n    const newObj = await userFound.save();\r\n    try {\r\n        if (newObj) return res.json({ message: 'Contraseña actualizada con éxito' })\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(500).json({ message: err.message })\r\n    }\r\n}\r\n\r\nauthCtrl.registrarCuenta = async(req, res) => {\r\n    const { name, username, password, email, roles } = req.body;\r\n\r\n    const newUser = new User({\r\n        name,\r\n        username,\r\n        password: await User.encryptPassword(password),\r\n        email,\r\n    });\r\n\r\n    if (roles) {\r\n        const foundRole = await Role.find({ name: { $in: roles } })\r\n        newUser.roles = foundRole.map(a => a._id);\r\n    } else {\r\n        const rol = await Role.findOne({ name: 'Usuario' });\r\n        newUser.roles = [rol._id];\r\n    }\r\n\r\n    const query = await newUser.save();\r\n    const token = jwt.sign({ id: query._id }, config.SECRET, { expiresIn: '24h' });\r\n\r\n    res.json({ token, codigo: query._id, message: 'Cuenta registrada con éxito' })\r\n}\r\n\r\nauthCtrl.deleteAccount = async(req, res) => {\r\n    const { id } = res.locals.jwtPayload;\r\n    const { nowPassword } = req.body;\r\n\r\n    const userFound = await User.findById(id);\r\n\r\n    if (!userFound) return res.status(404).json({ message: 'Usuario no existe' });\r\n\r\n    const matchPassword = await User.matchPassword(nowPassword, userFound.password);\r\n\r\n    if (!matchPassword) return res.status(401).json({ token: null, message: 'Contraseña incorrecta' });\r\n\r\n    try {\r\n        const dropAccount = await User.findByIdAndDelete(id);\r\n        if (dropAccount) return res.json({ message: 'Cuenta eliminada con éxito' });\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(500).json({ message: err.message })\r\n    }\r\n}\r\n\r\nauthCtrl.cerrarSesion = async(req, res) => {\r\n    const { id } = res.locals.jwtPayload;\r\n    console.log(id);\r\n    try {\r\n        const offline = await User.findByIdAndUpdate(id, { online: 0 })\r\n        if (offline) {\r\n            res.json({ message: 'Sesión Cerrada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default authCtrl;"],"file":"auth.controller.js"}