{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["userCtrl","cloudinary","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","getAll","req","res","User","find","sort","name","populate","query","length","json","status","message","console","log","getOne","userId","params","findById","createUser","body","username","password","email","roles","titleImage","imageProfile","encryptPassword","newUser","Role","$in","foundRole","map","a","_id","findOne","rol","save","updateProfile","description","data_image","file","uploader","upload","path","result","findByIdAndUpdate","public_id","url","fs","unlink","updateUser","deleteUser","findByIdAndRemove"],"mappings":"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","sourcesContent":["import Role from '../models/Role'\r\nimport User from '../models/User'\r\nimport cloudinary from 'cloudinary'\r\nimport fs from 'fs-extra'\r\nimport 'dotenv/config'\r\n\r\nconst userCtrl = {};\r\n\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n    api_key: process.env.CLOUDINARY_API_KEY,\r\n    api_secret: process.env.CLOUDINARY_API_SECRET,\r\n    // secure: true\r\n});\r\n\r\nuserCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await User.find().sort({ name: 'asc' }).populate('roles');\r\n\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Usuarios' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserCtrl.getOne = async(req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n        const query = await User.findById(userId).populate('roles');\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen el Usuario' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserCtrl.createUser = async(req, res) => {\r\n    const { name, username, password, email, roles, titleImage, imageProfile } = req.body;\r\n    try {\r\n        const newUser = new User({\r\n            name,\r\n            username,\r\n            password: await User.encryptPassword(password),\r\n            email,\r\n            titleImage,\r\n            imageProfile\r\n        });\r\n        if (roles) {\r\n            const foundRole = await Role.find({ name: { $in: roles } })\r\n            newUser.roles = foundRole.map(a => a._id);\r\n        } else {\r\n            const rol = await Role.findOne({ name: 'Usuario' });\r\n            newUser.roles = [rol._id];\r\n        }\r\n\r\n        const query = await newUser.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.updateProfile = async(req, res) => {\r\n    // const {userId} = req.params;\r\n    const { userId, username, name, email, description } = req.body;\r\n    console.log(req.body)\r\n    const data_image = req.file\r\n    try {\r\n        //Cloudinary\r\n        const result = await cloudinary.uploader.upload(data_image.path);\r\n        // console.log(result);\r\n        const query = await User.findByIdAndUpdate(userId, { name, username, email, description, titleImage: result.public_id, imageProfile: result.url });\r\n        console.log(query)\r\n        if (query) {\r\n            await fs.unlink(data_image.path)\r\n            res.json({ message: 'Perfil actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Perfil no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.updateUser = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const { name, username, email, status } = req.body;\r\n    try {\r\n        const query = await User.findByIdAndUpdate(userId, { name, username, email, status });\r\n        if (query) {\r\n            res.json({ message: 'Usuario actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Usuario no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.deleteUser = async(req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n        const query = await User.findByIdAndRemove(userId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Usuario no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default userCtrl;"],"file":"user.controller.js"}