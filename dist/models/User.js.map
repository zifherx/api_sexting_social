{"version":3,"sources":["../../src/models/User.js"],"names":["userSchema","Schema","name","type","String","require","username","password","email","titleImage","imageProfile","description","roles","ref","Types","ObjectId","status","Boolean","online","Number","timestamps","versionKey","statics","encryptPassword","clave","bcrypt","genSalt","salto","hash","matchPassword","claveRecibida","compare"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC1BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GADoB;AAE1BC,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,IAAI,EAAEC;AAAR,GAFgB;AAG1BG,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAHgB;AAI1BG,EAAAA,KAAK,EAAE;AAAEL,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAJmB;AAK1BI,EAAAA,UAAU,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GALc;AAM1BM,EAAAA,YAAY,EAAE;AAAEP,IAAAA,IAAI,EAAEC;AAAR,GANY;AAO1BO,EAAAA,WAAW,EAAE;AAAER,IAAAA,IAAI,EAAEC;AAAR,GAPa;AAQ1BQ,EAAAA,KAAK,EAAE;AAAEC,IAAAA,GAAG,EAAE,MAAP;AAAeV,IAAAA,IAAI,EAAEF,iBAAOa,KAAP,CAAaC;AAAlC,GARmB;AAS1BC,EAAAA,MAAM,EAAE;AAAEb,IAAAA,IAAI,EAAEc,OAAR;AAAiB,eAAS;AAA1B,GATkB;AAU1BC,EAAAA,MAAM,EAAE;AAAEf,IAAAA,IAAI,EAAEgB,MAAR;AAAgB,eAAS;AAAzB;AAVkB,CAAX,EAWhB;AACCC,EAAAA,UAAU,EAAE,IADb;AAECC,EAAAA,UAAU,EAAE;AAFb,CAXgB,CAAnB;;AAgBArB,UAAU,CAACsB,OAAX,CAAmBC,eAAnB;AAAA,qEAAqC,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACbC,qBAAOC,OAAP,CAAe,EAAf,CADa;;AAAA;AAC3BC,YAAAA,KAD2B;AAAA;AAAA,mBAEpBF,qBAAOG,IAAP,CAAYJ,KAAZ,EAAmBG,KAAnB,CAFoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAKA3B,UAAU,CAACsB,OAAX,CAAmBO,aAAnB;AAAA,sEAAmC,kBAAML,KAAN,EAAaM,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClBL,qBAAOM,OAAP,CAAeP,KAAf,EAAsBM,aAAtB,CADkB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;eAIe,qBAAM,MAAN,EAAc9B,UAAd,C","sourcesContent":["import { Schema, model } from 'mongoose'\r\nimport bcrypt from 'bcryptjs'\r\n\r\nconst userSchema = new Schema({\r\n    name: { type: String, require: true },\r\n    username: { type: String },\r\n    password: { type: String, require: true },\r\n    email: { type: String, require: true },\r\n    titleImage: { type: String },\r\n    imageProfile: { type: String },\r\n    description: { type: String },\r\n    roles: { ref: \"Role\", type: Schema.Types.ObjectId },\r\n    status: { type: Boolean, default: true },\r\n    online: { type: Number, default: 0 }\r\n}, {\r\n    timestamps: true,\r\n    versionKey: false\r\n})\r\n\r\nuserSchema.statics.encryptPassword = async(clave) => {\r\n    const salto = await bcrypt.genSalt(10);\r\n    return await bcrypt.hash(clave, salto);\r\n}\r\n\r\nuserSchema.statics.matchPassword = async(clave, claveRecibida) => {\r\n    return await bcrypt.compare(clave, claveRecibida);\r\n}\r\n\r\nexport default model('User', userSchema)"],"file":"User.js"}