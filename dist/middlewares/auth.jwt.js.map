{"version":3,"sources":["../../src/middlewares/auth.jwt.js"],"names":["verifyToken","req","res","next","requestHeader","token","header","status","json","message","decoded","jwt","verify","config","SECRET","locals","jwtPayload","id","User","findById","password","usuario","console","log"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAMA,WAAW;AAAA,2FAAG,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,YAAAA,aAFa,GAEG,gBAFH;AAIbC,YAAAA,KAJa,GAILJ,GAAG,CAACK,MAAJ,CAAWF,aAAX,CAJK;;AAAA,gBAMdC,KANc;AAAA;AAAA;AAAA;;AAAA,6CAMAH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CANA;;AAAA;AAObC,YAAAA,OAPa,GAOHC,yBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,mBAAOC,MAAzB,CAPG;AAQnBZ,YAAAA,GAAG,CAACa,MAAJ,CAAWC,UAAX,GAAwBN,OAAxB;AACMO,YAAAA,EATa,GASRP,OAAO,CAACO,EATA;AAAA;AAAA,mBAWGC,iBAAKC,QAAL,CAAcF,EAAd,EAAkB;AAAEG,cAAAA,QAAQ,EAAE;AAAZ,aAAlB,CAXH;;AAAA;AAWbC,YAAAA,OAXa;;AAAA,gBAadA,OAbc;AAAA;AAAA;AAAA;;AAAA,6CAaEnB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAbF;;AAAA;AAcnBN,YAAAA,IAAI;AAde;AAAA;;AAAA;AAAA;AAAA;AAgBnBmB,YAAAA,OAAO,CAACC,GAAR;;AAhBmB,kBAiBf,YAAId,OAAJ,IAAe,aAjBA;AAAA;AAAA;AAAA;;AAAA,6CAkBRP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAlBQ;;AAAA;AAAA,6CAoBRP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CApBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXT,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport config from '../config/config'\r\nimport User from '../models/User'\r\n\r\nexport const verifyToken = async(req, res, next) => {\r\n    try {\r\n        const requestHeader = \"x-access-token\";\r\n\r\n        const token = req.header(requestHeader)\r\n\r\n        if (!token) return res.status(409).json({ message: 'Falta Token' })\r\n        const decoded = jwt.verify(token, config.SECRET);\r\n        res.locals.jwtPayload = decoded;\r\n        const id = decoded.id;\r\n\r\n        const usuario = await User.findById(id, { password: 0 });\r\n\r\n        if (!usuario) return res.status(404).json({ message: 'No se encontr√≥ usuario.' })\r\n        next();\r\n    } catch (err) {\r\n        console.log(err);\r\n        if (err.message == 'jwt expired') {\r\n            return res.status(403).json({ message: 'Token ha expirado' });\r\n        } else {\r\n            return res.status(401).json({ message: 'No Autorizado' });\r\n        }\r\n    }\r\n}"],"file":"auth.jwt.js"}